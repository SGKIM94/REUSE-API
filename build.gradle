plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id "org.asciidoctor.convert" version "1.5.9.2"
	id 'java'
}

group = 'reuse'
version = '0.0.2-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://repo.spring.io/libs-milestone'}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.jgrapht:jgrapht-core:1.0.1'
	implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	runtimeOnly 'com.h2database:h2'

	compileOnly 'org.projectlombok:lombok'
	compile 'org.springframework.boot:spring-boot-starter-data-jpa'
	compile("org.mariadb.jdbc:mariadb-java-client")
	compile group: 'org.apache.commons', name: 'commons-text', version: '1.8'

	compile('org.springframework.cloud:spring-cloud-starter-aws')
	compile 'pl.allegro.tech.boot:handlebars-spring-boot-starter:0.3.0'

	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	dependencyManagement {
		imports {
			mavenBom 'org.springframework.cloud:spring-cloud-aws:2.0.0.RC2'
		}
	}

	annotationProcessor 'org.projectlombok:lombok'
}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/asciidoc/html5")
	into file("src/main/resources/static/docs")
}

task testDocument(type: Test) {
	useJUnitPlatform()
	filter {
		includeTestsMatching "*.docs.*"
	}
}

asciidoctor {
	dependsOn testDocument
	inputs.dir snippetsDir
}

bootJar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}

build {
	dependsOn copyDocument
}
